(()=>{"use strict";var t={870:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Drawing=void 0;const a=s(212),i=s(601),o=s(71),n=s(646),r=s(44),l=s(909),c=s(718);e.Drawing=class{constructor(){this.tool=i.NullTool.Instance,this.startDraw=t=>{r.Control.isControlElem(t.target)||(this.tool=o.ToolFactory.getTool(n.BoardStorage.get("tool"),this.canvas,c.Properties.local),this.tool.startDraw(l.Mouse.getPosition(t)),window.addEventListener("pointermove",this.draw,!1))},this.draw=t=>this.tool.addPoint(l.Mouse.getPosition(t)),this.endDraw=()=>{window.removeEventListener("pointermove",this.draw,!1),this.tool.endDraw(),this.tool=i.NullTool.Instance},this.canvas=new a.Canvas,r.Control.setupListeners(),this.appendListeners()}static setup(){this.instance||(this.instance=new this)}appendListeners(){window.addEventListener("pointerdown",this.startDraw,!1),window.addEventListener("pointerup",this.endDraw,!1)}}},212:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Canvas=void 0;const a=s(426);e.Canvas=class{constructor(){this._canvas=document.createElement("canvas"),this._canvas.width=window.screen.availWidth,this._canvas.height=window.screen.availHeight,this._ctx=this._canvas.getContext("2d"),this.setup(),document.body.appendChild(this._canvas)}setup(){this.ctx.lineJoin=a.Config.lineJoin,this.ctx.lineCap=a.Config.lineCap}setColor(t){this._ctx.strokeStyle=t,this._ctx.fillStyle=t}setLineWidth(t){this._ctx.lineWidth=t}clear(){this._ctx.clearRect(0,0,this._canvas.width,this._canvas.height)}get canvas(){return this._canvas}get ctx(){return this._ctx}}},426:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Config=void 0,e.Config={lineJoin:"round",lineCap:"round",canDraw:!1}},466:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.MainCanvas=void 0;const a=s(212),i=s(646);class o extends a.Canvas{constructor(){super(),this.drawWhiteBackground(),this.drawFromStorage(),this.sendToBack()}static create(){this.Instance}static get Instance(){return this._instance||(this._instance=new this)}drawWhiteBackground(){let t=this.ctx.fillStyle;this.ctx.fillStyle="white",this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height),this.ctx.fillStyle=t}drawFromStorage(){let t=i.BoardStorage.get("img");if(!t)return;let e=new Image;e.src=t,e.addEventListener("load",(()=>this.ctx.drawImage(e,0,0)))}sendToBack(){this.canvas.style.zIndex="-1000"}drawImage(t){this.ctx.drawImage(t,0,0)}saveInStorage(){let t=this.getImgSrc();i.BoardStorage.set("img",t)}getImgSrc(){let t=this.ctx.getImageData(0,0,this.canvas.width,this.canvas.height);return this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.ctx.putImageData(t,0,0),this.canvas.toDataURL("image/png")}}e.MainCanvas=o},663:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Brush=void 0;const a=s(397);class i extends a.Tool{prepare(){this.canvas.setColor(this.properties.color),this.canvas.setLineWidth(this.properties.lineWidth)}}e.Brush=i,i._toolName="brush"},327:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Eraser=void 0;const a=s(397);class i extends a.Tool{prepare(){this.canvas.setColor("#ffffff"),this.canvas.setLineWidth(this.properties.lineWidth)}}e.Eraser=i,i._toolName="eraser"},601:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.NullTool=void 0;const a=s(718),i=s(397);class o extends i.Tool{constructor(){super({},a.Properties.local)}static get Instance(){return this._instance||(this._instance=new this)}addPoint(){}startDraw(){}endDraw(){}prepare(){}}e.NullTool=o,o._toolName="none"},397:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Tool=void 0;const a=s(466);e.Tool=class{constructor(t,e){this.canvas=t,this.properties=e,this.points=[]}static get toolName(){return this._toolName}addPoint(t){this.points.push(t),this.draw()}startDraw(t){this.prepare(),this.addPoint(t)}draw(){if(this.points.length<3){let t=this.points[0];return this.canvas.ctx.beginPath(),this.canvas.ctx.arc(t.x,t.y,this.canvas.ctx.lineWidth/2,0,2*Math.PI,!0),this.canvas.ctx.fill(),void this.canvas.ctx.closePath()}this.canvas.ctx.clearRect(0,0,this.canvas.canvas.width,this.canvas.canvas.height),this.canvas.ctx.beginPath(),this.canvas.ctx.moveTo(this.points[0].x,this.points[0].y);for(let t=1;t<this.points.length-2;t++){let e=(this.points[t].x+this.points[t+1].x)/2,s=(this.points[t].y+this.points[t+1].y)/2;this.canvas.ctx.quadraticCurveTo(this.points[t].x,this.points[t].y,e,s)}let t=this.points.length-2;this.canvas.ctx.quadraticCurveTo(this.points[t].x,this.points[t].y,this.points[t+1].x,this.points[t+1].y),this.canvas.ctx.stroke()}endDraw(){a.MainCanvas.Instance.drawImage(this.canvas.canvas),a.MainCanvas.Instance.saveInStorage(),this.canvas.clear()}}},71:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.ToolFactory=void 0;const a=s(663),i=s(327);e.ToolFactory=class{static getTool(t,e,s){switch(t){case a.Brush.toolName:return new a.Brush(e,s);case i.Eraser.toolName:return new i.Eraser(e,s);default:throw new Error("Invalid Tool name")}}}},646:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.BoardStorage=void 0;const a=s(392);e.BoardStorage=class{static set(t,e){"object"!=typeof e&&sessionStorage.setItem(t,e),e=JSON.stringify(e),sessionStorage.setItem(t,e)}static get(t){let e=sessionStorage.getItem(t);return a.Valid.isJSON(e)?JSON.parse(e):e}}},44:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Control=void 0;const a=s(646);class i{static isControlElem(t){let e=!1;return Array.from(this.elements.tools.children).forEach((s=>{s.className!=t.className||(e=!0)})),e||t.className==this.elements.colorOutput.className||t.className==this.elements.colorInput.className||t.className==this.elements.lineWidthInput.className||t.className==this.elements.lineWidthOutput.className||t.className==this.elements.download.className}static setupListeners(){this.elements.lineWidthInput.addEventListener("input",(t=>this.setLineWidth(+t.target.value))),this.elements.colorInput.addEventListener("input",(t=>this.setColor(t.target.value))),this.elements.tools.addEventListener("click",(t=>this.setTool(t.target.className))),this.elements.download.addEventListener("click",(()=>this.downloadImage()))}static setupInitialProperties(){this.setColor(a.BoardStorage.get("color")||"#000000"),this.setLineWidth(a.BoardStorage.get("lineWidth")||10),this.setTool(a.BoardStorage.get("tool")||"brush")}static setColor(t){a.BoardStorage.set("color",t),this.elements.colorOutput.style.backgroundColor=t}static setLineWidth(t){a.BoardStorage.set("lineWidth",t.toString()),this.elements.lineWidthOutput.value=t.toString(),this.elements.lineWidthInput.value=t.toString()}static setTool(t){"tools"!=t&&a.BoardStorage.set("tool",t)}static downloadImage(){let t=a.BoardStorage.get("img");this.elements.download.href=t}}e.Control=i,i.elements={colorOutput:document.getElementsByClassName("color-label-element")[0],colorInput:document.getElementsByClassName("color")[0],lineWidthOutput:document.getElementsByClassName("paint-size-out")[0],lineWidthInput:document.getElementsByClassName("paint-size-in")[0],tools:document.getElementsByClassName("tools")[0],download:document.getElementsByClassName("download")[0]}},909:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Mouse=void 0;const a=s(967);e.Mouse=class{static getPosition(t){return new a.Point(t.pageX,t.pageY)}}},967:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Point=void 0,e.Point=class{constructor(t,e){this._x=t,this._y=e}get x(){return this._x}get y(){return this._y}}},718:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Properties=void 0;const a=s(646);e.Properties=class{constructor(t,e){this._lineWidth=t,this._color=e}static get local(){return new this(+a.BoardStorage.get("lineWidth"),a.BoardStorage.get("color"))}get lineWidth(){return this._lineWidth}get color(){return this._color}}},392:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Valid=void 0,e.Valid=class{static isJSON(t){try{JSON.parse(t)}catch(t){return!1}return!0}}}},e={};function s(a){var i=e[a];if(void 0!==i)return i.exports;var o=e[a]={exports:{}};return t[a](o,o.exports,s),o.exports}(()=>{const t=s(870),e=s(466),a=s(44);(class{static run(){a.Control.setupInitialProperties(),e.MainCanvas.create(),t.Drawing.setup()}}).run()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,