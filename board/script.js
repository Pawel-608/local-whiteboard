(()=>{"use strict";var t={870:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Drawing=void 0;const i=s(212),a=s(663),o=s(327),n=s(601),r=s(646),c=s(44),l=s(909),h=s(718);e.Drawing=class{constructor(){this.draw=t=>this.tool.addPoint(l.Mouse.getPosition(t)),this.canvas=new i.Canvas,this.tool=n.NullTool.Instance,c.Control.setupListeners(),this.appendListeners()}static get Instance(){return this._instance||(this._instance=new this)}appendListeners(){window.addEventListener("pointerdown",(t=>{c.Control.isControlElem(t.target)||(this.tool=this.chooseTool(r.BoardStorage.get("tool"),h.Properties.local),this.tool.startDraw(l.Mouse.getPosition(t)),window.addEventListener("pointermove",this.draw,!1))}),!1),window.addEventListener("pointerup",(()=>{window.removeEventListener("pointermove",this.draw,!1),this.tool.endDraw(),this.tool=n.NullTool.Instance}),!1)}chooseTool(t,e){switch(t){case"brush":return new a.Brush(this.canvas,e);case"eraser":return new o.Eraser(this.canvas,e);default:return n.NullTool.Instance}}}},212:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Canvas=void 0;const i=s(426);e.Canvas=class{constructor(){this._canvas=document.createElement("canvas"),this._canvas.width=window.screen.availWidth,this._canvas.height=window.screen.availHeight,this._ctx=this._canvas.getContext("2d"),this.setProperties(),document.body.appendChild(this._canvas)}setProperties(){this.ctx.lineJoin=i.Config.lineJoin,this.ctx.lineCap=i.Config.lineCap}setColor(t){this._ctx.strokeStyle=t,this._ctx.fillStyle=t}setLineWidth(t){this._ctx.lineWidth=t}clear(){this._ctx.clearRect(0,0,this._canvas.width,this._canvas.height)}get canvas(){return this._canvas}get ctx(){return this._ctx}}},426:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Config=void 0,e.Config={lineJoin:"round",lineCap:"round",canDraw:!1}},466:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.MainCanvas=void 0;const i=s(212),a=s(646);class o extends i.Canvas{constructor(){super(),this.drawWhiteBackground(),this.drawFromStorage(),this.sendToBack()}static get Instance(){return this._instance||(this._instance=new this)}drawFromStorage(){let t=a.BoardStorage.get("img");if(!t)return;let e=new Image;e.src=t,e.addEventListener("load",(()=>this.ctx.drawImage(e,0,0)))}drawWhiteBackground(){let t=this.ctx.fillStyle;this.ctx.fillStyle="white",this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height),this.ctx.fillStyle=t}sendToBack(){this.canvas.style.zIndex="-1000"}drawImage(t){this.ctx.drawImage(t,0,0)}saveInStorage(){let t=this.getImgSrc();a.BoardStorage.set("img",t)}getImgSrc(){let t=this.ctx.getImageData(0,0,this.canvas.width,this.canvas.height);return this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.ctx.putImageData(t,0,0),this.canvas.toDataURL("image/png")}}e.MainCanvas=o},663:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Brush=void 0;const i=s(397);class a extends i.Tool{prepare(){this.canvas.setColor(this.properties.color),this.canvas.setLineWidth(this.properties.lineWidth)}}e.Brush=a},327:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Eraser=void 0;const i=s(397);class a extends i.Tool{prepare(){this.canvas.setColor("#ffffff"),this.canvas.setLineWidth(this.properties.lineWidth)}}e.Eraser=a},601:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.NullTool=void 0;const i=s(718),a=s(397);class o extends a.Tool{constructor(){super({},i.Properties.local)}static get Instance(){return this._instance||(this._instance=new this)}addPoint(){}startDraw(){}endDraw(){}prepare(){}}e.NullTool=o},397:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Tool=void 0;const i=s(466);e.Tool=class{constructor(t,e){this.canvas=t,this.properties=e,this.points=[]}addPoint(t){this.points.push(t),this.draw()}startDraw(t){this.prepare(),this.addPoint(t)}draw(){if(this.points.length<3){let t=this.points[0];return this.canvas.ctx.beginPath(),this.canvas.ctx.arc(t.x,t.y,this.canvas.ctx.lineWidth/2,0,2*Math.PI,!0),this.canvas.ctx.fill(),void this.canvas.ctx.closePath()}this.canvas.ctx.clearRect(0,0,this.canvas.canvas.width,this.canvas.canvas.height),this.canvas.ctx.beginPath(),this.canvas.ctx.moveTo(this.points[0].x,this.points[0].y);for(let t=1;t<this.points.length-2;t++){let e=(this.points[t].x+this.points[t+1].x)/2,s=(this.points[t].y+this.points[t+1].y)/2;this.canvas.ctx.quadraticCurveTo(this.points[t].x,this.points[t].y,e,s)}let t=this.points.length-2;this.canvas.ctx.quadraticCurveTo(this.points[t].x,this.points[t].y,this.points[t+1].x,this.points[t+1].y),this.canvas.ctx.stroke()}endDraw(){i.MainCanvas.Instance.drawImage(this.canvas.canvas),i.MainCanvas.Instance.saveInStorage(),this.canvas.clear()}}},646:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.BoardStorage=void 0;const i=s(392);e.BoardStorage=class{static set(t,e){"object"!=typeof e&&sessionStorage.setItem(t,e),e=JSON.stringify(e),sessionStorage.setItem(t,e)}static get(t){let e=sessionStorage.getItem(t);return i.Valid.isJSON(e)?JSON.parse(e):e}}},44:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Control=void 0;const i=s(646);class a{static isControlElem(t){let e=!1;return Array.from(this.tools.children).forEach((s=>{s.className!=t.className||(e=!0)})),e||t.className==this.colorOutput.className||t.className==this.colorInput.className||t.className==this.lineWidthInput.className||t.className==this.lineWidthOutput.className||t.className==this.download.className}static setupListeners(){this.lineWidthInput.addEventListener("input",(t=>this.setLineWidth(+t.target.value))),this.colorInput.addEventListener("input",(t=>this.setColor(t.target.value))),this.tools.addEventListener("click",(t=>this.setTool(t.target.className))),this.download.addEventListener("click",(()=>this.downloadImage()))}static setColor(t){i.BoardStorage.set("color",t),this.colorOutput.style.backgroundColor=t}static setLineWidth(t){i.BoardStorage.set("lineWidth",t.toString()),this.lineWidthOutput.value=t.toString(),this.lineWidthInput.value=t.toString()}static setTool(t){"tools"!=t&&i.BoardStorage.set("tool",t)}static downloadImage(){let t=i.BoardStorage.get("img");this.download.href=t}}e.Control=a,a.colorOutput=document.getElementsByClassName("color-label-element")[0],a.colorInput=document.getElementsByClassName("color")[0],a.lineWidthOutput=document.getElementsByClassName("paint-size-out")[0],a.lineWidthInput=document.getElementsByClassName("paint-size-in")[0],a.tools=document.getElementsByClassName("tools")[0],a.download=document.getElementsByClassName("download")[0]},909:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Mouse=void 0;const i=s(967);e.Mouse=class{static getPosition(t){return new i.Point(t.pageX,t.pageY)}static setCursorStyle(t){document.body.style.cursor=t}}},967:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Point=void 0,e.Point=class{constructor(t,e){this._x=t,this._y=e}get x(){return this._x}get y(){return this._y}}},718:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Properties=void 0;const i=s(646);e.Properties=class{constructor(t,e){this._lineWidth=t,this._color=e}static get local(){return new this(+i.BoardStorage.get("lineWidth"),i.BoardStorage.get("color"))}get lineWidth(){return this._lineWidth}get color(){return this._color}}},392:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Valid=void 0,e.Valid=class{static isJSON(t){try{JSON.parse(t)}catch(t){return!1}return!0}}}},e={};function s(i){var a=e[i];if(void 0!==a)return a.exports;var o=e[i]={exports:{}};return t[i](o,o.exports,s),o.exports}(()=>{const t=s(870),e=s(466),i=s(646),a=s(44);(class{static run(){this.setupConfig(),e.MainCanvas.Instance,t.Drawing.Instance}static setupConfig(){a.Control.setColor(i.BoardStorage.get("color")||"#000000"),a.Control.setLineWidth(i.BoardStorage.get("lineWidth")||10),a.Control.setTool(i.BoardStorage.get("tool")||"brush")}}).run()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,